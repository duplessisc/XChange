package info.bitrich.xchangestream.btcmarkets.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonRootName;
import info.bitrich.xchangestream.btcmarkets.dto.BTCMarketsWebSocketHeartbeatMessage.Channel;
import java.util.List;

/**
 * This Class represents the trade event generated by the websocket
 *
 * <p>{@link BTCMarketsWebSocketHeartbeatMessage#channels} list of channels in the heartbeat
 *
 * <p>{@link BTCMarketsWebSocketHeartbeatMessage#messageType} All messages published include a
 * {@code json} attribute called messageType that represents type of event that is being received
 *
 * <h2>Example Event</>
 *
 * <blockquote>
 *
 * <p>{ messageType: 'heartbeat',
 *
 * <p>channels: [ { name: 'orderChange' }, { name: 'orderbook', marketIds: [ 'BTC-AUD', 'XRP-AUD' ]
 * }, { name: 'heartbeat' } ] }</>
 */
public class BTCMarketsWebSocketHeartbeatMessage {

  @Override
  public String toString() {
    return "BTCMarketsWebSocketHeartbeatMessage [channels="
        + channels
        + ", messageType="
        + messageType
        + "]";
  }

  private final List<Channel> channels;

  private final String messageType;

  public BTCMarketsWebSocketHeartbeatMessage(
      @JsonProperty("channels") List<Channel> channels,
      @JsonProperty("messageType") String messageType) {
    this.channels = channels;
    this.messageType = messageType;
  }

  public List<Channel> getChannels() {
    return channels;
  }

  public String getMessageType() {
    return messageType;
  }

  @JsonRootName(value = "channels")
  public static class Channel {

    @Override
    public String toString() {
      return "Channel [name=" + name + ", marketIds=" + marketIds + "]";
    }

    public Channel() {}

    public Channel(String name, List<String> marketIds) {
      super();
      this.name = name;
      this.marketIds = marketIds;
    }

    public String name;
    public List<String> marketIds;
  }
}
